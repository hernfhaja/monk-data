import get from './get';
import set from './set';
import clean from './clean';
import remove from './remove';
import { Config } from '../init';
import { Permission } from './isPermissionAvailable';
import { LiffMenuColorSetting } from '../style/types';
declare const _default: {
    get: typeof get;
    set: typeof set;
    remove: typeof remove;
    clean: typeof clean;
};
export default _default;
interface JWTPayload {
    iss?: string;
    sub?: string;
    aud?: string;
    exp?: number;
    iat?: number;
    auth_time?: number;
    nonce?: string;
    amr?: string[];
    name?: string;
    picture?: string;
    email?: string;
}
interface ConfigInStore extends Partial<Config> {
    redirectUri?: string;
}
export declare function getConfig(): ConfigInStore;
export declare function setConfig(value: ConfigInStore): void;
interface LoginTmp {
    codeVerifier: string;
}
/**
 * temporary values for LINE Login getter / setter
 */
export declare function getLoginTmp(): LoginTmp;
export declare function setLoginTmp(value: LoginTmp): void;
export declare function removeLoginTmp(): void;
/**
 * Gets the current user's access token.
 * You can use the access token obtained with this API to send user information from the LIFF app to the server.
 * @see {@link https://developers.line.biz/en/docs/liff/using-user-profile/|Using user information in LIFF apps and servers}
 */
export declare function getAccessToken(): string | null;
export declare function setAccessToken(value: string): void;
/**
 * context token & client id will be set
 * from token_hash to sessionToken from LINE 10.8.0
 */
export declare const getRawContext: () => string | null;
export declare const getClientId: () => string | null;
export declare function setClientId(value: string): void;
/**
 * Get the raw ID token of the current user obtained by the LIFF SDK.
 * An ID token is a JSON Web Token (JWT) that contains user information.
 *
 * You can use the ID token obtained with this API when sending the user information from the LIFF app to the server.
 * @see {@link https://developers.line.biz/en/docs/liff/using-user-profile/|Using user information in LIFF apps and servers}
 */
export declare function getIDToken(): string | null;
export declare function setIDToken(value: string): void;
/**
 * Gets the payload of the ID token that's acquired by the LIFF SDK.
 * The payload includes the user display name, profile image URL, and email address.
 *
 * Use this API when you want to use the display name of the user in the LIFF app.
 */
export declare function getDecodedIDToken(): JWTPayload | null;
export declare function setDecodedIDToken(value: unknown): void;
/**
 * featureToken getter / setter
 */
export declare function getFeatureToken(): string | null;
export declare function setFeatureToken(value: string): void;
export interface ProfilePlusInterface {
    regionCode: string;
}
export interface AIdInterface {
    id: string;
    t: boolean;
    att?: number;
    skadids?: string;
    atskadvt?: string;
}
/**
 * context getter / setter
 */
export interface Context {
    type: 'utou' | 'room' | 'group' | 'none' | 'square_chat' | 'external';
    utouId?: string;
    roomId?: string;
    groupId: string;
    userId?: string;
    endpointUrl: string;
    viewType?: 'compact' | 'tall' | 'full' | 'cover' | 'frame' | 'new full' | 'full flex';
    accessTokenHash?: string;
    permanentLinkPattern?: 'concat';
    tid?: string;
    squareId?: string;
    squareChatId?: string;
    squareMemberId?: string;
    /**
     * profile+ related settings
     */
    profilePlus?: ProfilePlusInterface;
    /**
     * device-related settings
     */
    d?: {
        autoplay: boolean;
        aId: AIdInterface;
    };
    /**
     * whether user can use each methods
     */
    availability: {
        shareTargetPicker: {
            permission: boolean;
            minVer: string;
            unsupportedFromVer?: string;
        };
        multipleLiffTransition: {
            permission: boolean;
            minVer: string;
            unsupportedFromVer?: string;
        };
        subwindowOpen: {
            permission: boolean;
            minVer: string;
            unsupportedFromVer?: string;
        };
        scanCode: {
            permission: boolean;
            minVer: string;
            unsupportedFromVer?: string;
        };
        getAdvertisingId: {
            permission: boolean;
            minVer: string;
            unsupportedFromVer?: string;
        };
        addToHomeScreen: {
            permission: boolean;
            minVer: string;
            unsupportedFromVer?: string;
        };
        bluetoothLeFunction: {
            permission: boolean;
            minVer: string;
            unsupportedFromVer?: string;
        };
        skipChannelVerificationScreen: {
            permission: boolean;
            minVer: string;
        };
    };
    /**
     * mode of UTS tracking
     * mode: whether SDK init and send PV or does nothing
     * sendRatio: how much SDK filters out of total. (won't send) 0.0 ~ 1.0 (no filter)
     */
    utsTracking?: {
        mode: 'force' | 'auto' | 'none';
        sendRatio: number;
    };
    /**
     * menu color setting of LIFF
     * adaptableColorSchemes: which color schemes liff app can use.
     * lightModeColor: menuColorSetting of lightMode.
     * darkModeColor: menuColorSetting of darkMode.
     */
    menuColorSetting?: {
        adaptableColorSchemes: Array<'light' | 'dark'>;
        lightModeColor?: LiffMenuColorSetting;
        darkModeColor?: LiffMenuColorSetting;
    };
    scope: Array<Permission>;
}
export declare function getContext(): Context | null;
export declare function setContext(value: Context | null): void;
/**
 * special handle expire time in cookie
 */
export declare function setExpireTime(expires: Date): void;
export declare function getExpireTime(): string | null;
export declare function removeExpireTime(): void;
export declare function getMSTChallenge(): string | null;
export declare function setMSTChallenge(value: string): void;
export declare function getMST(): string | null;
export declare function setMST(value: string): void;
export declare function getMSIT(): string | null;
export declare function setMSIT(value: string): void;
export declare function getMSTVerifier(): string | null;
export declare function setMSTVerifier(value: string): void;
export declare function getAppData(): string | null;
export declare function setAppData(value: string): void;
/**
 * store flag if subsequent LIFF App
 */
export declare function setIsSubsequentLiffApp(value: boolean): void;
export declare function getIsSubsequentLiffApp(): boolean;
