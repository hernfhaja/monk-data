import liff from '../liff';
import { ModuleDriver } from './driver';
import { ModuleContext } from './context';
import { LiffModule } from './types';
declare type Liff = typeof liff;
declare type Use = <T = unknown, U = unknown, V extends Liff = Liff>(this: V, module: LiffModule<T, U>, option?: U) => V;
declare type Option = {
    namespacePrefix?: string;
};
export declare class UseModule implements LiffModule<Use> {
    private driver;
    private option?;
    constructor(driver: ModuleDriver, option?: Option | undefined);
    install(context: ModuleContext): Use;
    get name(): string;
    private get defaultOption();
    private factory;
}
export {};
