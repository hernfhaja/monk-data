import { ModuleContext } from './context';
import { Query } from '../util/qs/parse';
import { Option } from '../auth/login';
export declare type SyncHookFunc<T extends readonly unknown[] = []> = (...args: T) => void;
export declare type AsyncHookFunc<T extends readonly unknown[] = []> = (...args: T) => Promise<void>;
export declare type HookFunc<T extends readonly unknown[] = []> = AsyncHookFunc<T> | SyncHookFunc<T>;
export interface AsyncHooks {
    startInit?: HookFunc<[Query]>;
    beforeInitFinished?: HookFunc;
    beforeInitSuccess?: HookFunc;
    initError?: HookFunc<[Error]>;
}
export interface SyncHooks {
    beforeLogin?: SyncHookFunc<[Option]>;
}
export declare type Hooks = AsyncHooks & SyncHooks;
export declare type ModuleNamespace<T> = T;
export interface LiffModule<T = unknown, U = unknown> {
    install(context: ModuleContext, options?: U): ModuleNamespace<T>;
    readonly name: string;
}
